import sys, os, glob, shutil

sys.path.append('../../../build/utils')
import scons_utils
sys.path.pop()

################################################################################
# PROJECT SPECIFIC VARS/CODE
################################################################################
#==============================================================================#

LIB_NAME = 'jpeg'

# Handle command-line options
opts = scons_utils.addDefaultOptions(Options())
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.doConfigure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])

include_path = ['./']

depends = []
if sys.platform.startswith('win32'):
    depends.append('Ws2_32') # for ntohs on Windows
    
    shutil.copy('jconfig.vc', 'jconfig.h')


sourceFiles = (
        'jcapimin.c',
        'jccoefct.c',
        'jccolor.c',
        'jcdctmgr.c',
        'jchuff.c',
        'jcinit.c',
        'jcmainct.c',
        'jcmarker.c',
        'jcmaster.c',
        'jcomapi.c',
        'jcparam.c',
        'jcphuff.c',
        'jcprepct.c',
        'jcsample.c',
        'jctrans.c',
        'jdapimin.c',
        'jdapistd.c',
        'jdatadst.c',
        'jdatasrc.c',
        'jdcoefct.c',
        'jdcolor.c',
        'jddctmgr.c',
        'jdhuff.c',
        'jdinput.c',
        'jdmainct.c',
        'jdmarker.c',
        'jdmaster.c',
        'jdmerge.c',
        'jdphuff.c',
        'jdpostct.c',
        'jdsample.c',
        'jdtrans.c',
        'jerror.c',
        'jfdctflt.c',
        'jfdctfst.c',
        'jfdctint.c',
        'jidctflt.c',
        'jidctfst.c',
        'jidctint.c',
        'jidctred.c',
        'jmemansi.c',
        'jmemmgr.c',
        'jquant1.c',
        'jquant2.c',
        'jutils.c',
    )


build_libs = [{'source':sourceFiles, 'lib':'%s' % LIB_NAME, 'dynamic':False,
        'depends':depends}]
env.Append(CPPPATH = include_path)
libs = scons_utils.makeLibs(env, build_libs, local_lib, [])

#==============================================================================#
