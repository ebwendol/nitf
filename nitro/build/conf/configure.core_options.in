###########################################################
pretool=""
pretool_defs=""
pretool_flags=""

enabled_64bit="false"

# Do we want to create DSOs?
make_dsos="false"


checkprog ()
{
   # The AC_CHECK_PROG macro seems to replace the value of
   # its argument with dummy sometimes, so we make a copy
   # of it here.
   progname="${1}"
   AC_CHECK_PROG(result, "$1", "found", "not_found")

   if test "${result}" = "not_found"
   then
      echo ""
      echo "########## WARNING! Can't find program: ##########"
      echo "# ${progname}"
      echo "########### Value will be used anyway. ###########"
      echo ""
   fi
}

#tack on 'gnu' to the lib_dir if using gcc
#this means that the Makefiles will need to add a lib_dir after @target@
case "${CC}" in
    gcc)
        AC_MSG_RESULT(gnu compiler libdir)
        lib_dir="gnu"
    ;;
esac


AC_ARG_ENABLE(64bit,
              [  --enable-64bit		Make a 64-bit build.],
              ok=${enableval},
              ok="no")
if test "${ok}" != "no"
then
   AC_MSG_RESULT(enabling 64 bit compiles...)
   cc_64_flags="${sys_cc_64_flags}"
   enabled_64bit="true"
fi

AC_ARG_ENABLE(warnings,
	      [  --enable-warnings 		Turn on compiler warnings (default is on) ],
	      ok=$enable_warnings,
	      ok="yes")
if test "${ok}" = "no" 
then 
     AC_MSG_RESULT(disabling warnings...)
     cc_warn_flags=""
else
     AC_MSG_RESULT(enabling warnings...)
     cc_warn_flags="${sys_cc_warn_flags}"
fi

AC_ARG_ENABLE(debugging,
	      [  --enable-debugging 		Turn on compiler debugging (default is on) ],
	      ok=$enable_debugging,
	      ok="no")
if test "${ok}" = "no" 
then 
     AC_MSG_RESULT(disabling debugging...)
     cc_debug_flags=""
else
     AC_MSG_RESULT(enabling debugging...)
     cc_debug_flags="${sys_cc_debug_flags} -D__DEBUG"
fi

AC_ARG_ENABLE(optz,
	       [  --enable-optz			Turn on optimization at default level (default is on) ],
	       ok=$enable_optz,
	       ok="yes")
if test "${ok}" = "no" 
then 
     AC_MSG_RESULT(disabling optimizations...)
     cc_optz_flags=""
else
     AC_MSG_RESULT(enabling default level optimizations...)
     cc_optz_flags="${def_cc_optz_flags}"
fi


AC_ARG_ENABLE(verbose,
	      [  --enable-verbose 		Turn on compiler verbose (default is on)],
	      ok=$enable_verbose,
	      ok="yes")
if test "${ok}" = "no" 
then 
     AC_MSG_RESULT(disabling verbose...)
     cc_verb_flags=""
else
     AC_MSG_RESULT(enabling verbose...)
     cc_verb_flags="${sys_cc_verb_flags}"
fi


AC_ARG_WITH(optz,
            [  --with-optz=OPTZ		Compile with optimization level (med, fast, fastest)],
	    ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   cc_optz_flags="${def_cc_optz_flags}"
   case "${ok}" in 
      med)
         AC_MSG_RESULT(setting medium optimization flags...)
	 cc_optz_flags="${sys_cc_optz_med}"
      ;;
      fast)
         AC_MSG_RESULT(setting fast optimization flags...)
	 cc_optz_flags="${sys_cc_optz_fast}"
      ;;
      fastest)
         AC_MSG_RESULT(setting fastest optimization flags...)
	 cc_optz_flags="${sys_cc_optz_fastest}"
      ;;

   esac
fi


#####################################################################
#  Add additional include and lib dirs
AC_ARG_WITH(includes,
            [  --with-includes=INCLUDES	Add INCLUDES],
	    ok=${withval},
	    ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
    AC_MSG_RESULT(adding additional includes... ${ok})
    cc_includes="${cc_includes} -I${ok}"
fi

AC_ARG_WITH(libpaths,
	    [  --with-libpaths=LIBPATHs 	Add LIBPATHS],
	    ok=${withval},
	    ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
    AC_MSG_RESULT(adding additional libpaths... ${ok})
    libpath="${libpath} ${ok}"
fi
											

######################################################################
# Process '--with-pretool' option and flags.
###################################################################### 
AC_ARG_WITH(dummy,
            [
The following groups of options allow your to set various compiler flags, options,
and definitions individually. These override any options set by the 'enable-<feature>'
arguments above. 

Multiple arguments should be enclosed in double quotes. Many of these options
are best set in the indvidual Makefile.in's, but are provided here for completeness.

Compiler tool options. These specify a tool and it's options used before the \$(CC) command.
The tool and options are built from:
 (pretool)
 ])

AC_ARG_WITH(pretool,
            [  --with-pretool=TOOL		Use TOOL before compile command],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
    checkprog "${ok}"
    pretool="${ok}"
fi

######################################################################
# Process '--with-<compiler options>' options.
# ex -g -Wall
# --with-cc_opts=
AC_ARG_WITH(dummy,
            [
Compiler options. These specify flags passed to the compiler.
The options are built from:
 ( (flags) ]
)


AC_ARG_WITH(flags,
            [  --with-flags=FLAGS		Use FLAGS as compiler options],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   cc_flags="${cc_flags} ${ok}"
fi

######################################################################
# Process '--with-<compiler defs>' options.
AC_ARG_WITH(dummy,
            [
Compiler macro definitions. These specify macro definitions passed to the compiler.
The definitions are built from:
 (defs)
 ])

AC_ARG_WITH(defs,
            [  --with-defs=DEFS		Use DEFS as macro definitions],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   cc_defs="${cc_defs} ${ok}"
fi

######################################################################
# Process '--with-<libs>' options.
###################################################################### 
AC_ARG_WITH(dummy,
            [
Link libraries. These specify libraries that will be linked with the executable.
The final library options are built from:
 (pre_libs) (libs) (post_libs)
 ])

AC_ARG_WITH(prelibs,
            [  --with-prelibs=LIBS		Link executable with LIBS],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   link_prelibs="${ok} ${link_prelibs}"
fi

AC_ARG_WITH(autolibs,
            [  --with-autolibs=LIBS		Link executable with LIBS],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   link_autolibs="${link_autolibs} ${ok}"
fi

AC_ARG_WITH(postlibs,
            [  --with-postlibs=LIBS		Link executable with LIBS],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   link_postlibs="${link_postlibs} ${ok}"
fi


AC_SUBST(pretool)
AC_SUBST(make_dsos)
